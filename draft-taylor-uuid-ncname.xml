<?xml version="1.0" encoding="utf-8"?>
<rfc category="info" submissionType="independent" ipr="trust200902">
  <front>
    <title>Compact, Grammar-Friendly Representations for UUIDs</title>
    <author initials="D" surname="Taylor" fullname="Dorian Taylor"/>
    <date/>
    <abstract>
      <t>The Universally Unique Identifier is a suitable standard for, as the name suggests, uniquely identifying entities in a symbol space large enough that the identifiers do not collide. The literal representation, however, specified in <xref target="RFC4122"/>, cannot be used in conjunction with a number of formal grammars where it would be beneficial to do so. This document provides the UUID with two additional representations to make these applications possible.</t>
    </abstract>
  </front>
  <middle>
    <section title="Introduction" anchor="introduction">
      <t>There are a number of places in formal languages where it would be useful to put UUIDs, but the grammar forbids it. Many grammars forbid identifiers to begin with numbers, or contain hyphens, or colons (as with the UUID representation in <xref target="RFC4122"/>). The NCName production, which is in use in a number of XML and RDF applications, is one such example. Up until a recent change, the HTML ID production had similar constraints. Virtually every programming language likewise requires identifiers such as variables and function names to start with a letter or underscore, and very few admit hyphens. This constraint causes developers to turn to ad-hoc solutions when they want to use UUIDs in these places.</t>
      <t>This document specifies a representation &#x2014; or rather, two representations &#x2014; as well as the related transformations to and from the familiar UUID format. The goal of this specification is in part to eliminate an extra decision on the part of developers who find themselves in this position, and in part to provide alternative representations for UUIDs which remain valid but are shorter than the original.</t>
    </section>
    <section title="Terminology" anchor="terminology">
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they appear in all capitals, as shown here.</t>
    </section>
    <section title="Strategy" anchor="strategy">
      <t>Not all 128 bits of a UUID is data; rather, several bits are masked. The top four bits of the third segment, known as <tt>time_hi_and_version</tt>, specify the UUID's version, which is fixed. Up to three high bits in the following segment, called <tt>clock_seq_hi_and_reserved</tt>, specify the variant: how the UUID is meant to be read. We remove these masked quartets (we take an extra bit for the variant) and use them as "bookends" for the rest of the identifier, mapping them to the first sixteen symbols of the base32 table (or base64, that portion is identical), which are all letters. The remaining 120 bits, which we bit-shift to close the gaps of the two masked quartets we removed, now divide evenly by both 5 and 6, the number of bits per character in Base32 and Base64, respectively.</t>
      <t>The transformation takes the UUID <tt>4abc6330-f548-4e67-b9f9-12d4323769cd</tt>, and returns the result <tt>ESrxjMPVI5nn5EtQyN2nNL</tt> for base64, and <tt>ejk6ggmhvjdtht6is2qzdo2onl</tt> for base32. These symbols will always start and end with case-insensitive letters, and the entire base32 symbol is case-insensitive.</t>
    </section>
    <section title="Syntax" anchor="syntax">
      <t>Here is the ABNF syntax for the symbols <tt>uuid-ncname32</tt> and <tt>uuid-ncname64</tt>:</t>
      <sourcecode type="abnf">
<![CDATA[uuid-ncname32 = bookend 24base32 bookend
uuid-ncname64 = bookend 20base64url bookend
bookend       = %x41-50 / %x61-70 ; [A-Pa-p]
base32        = %x41-5a / %x61-7a / %x32-37 ; [A-Za-z2-7]
base64url     = %x41-5a / %x61-7a / %x30-39 / %x2d / %x5f ; [A-Za-z0-9_-]]]>
      </sourcecode>
    </section>
    <section title="Algorithms" anchor="algorithms">
      <t>These are candidate algorithms for encoding and decoding the symbols, transforming them to and from the conventional UUID representation. There are certainly many equivalents.</t>
      <section title="Encoding Algorithm" anchor="encoding">
        <t>First we apply the shifting algorithm:</t>
        <ol>
          <li>Convert the UUID to a binary string <tt>bin</tt>.</li>
          <li>Convert <tt>bin</tt> to an array of four 32-bit unsigned network-endian integers <tt>ints</tt>.</li>
          <li>Extract <tt>version</tt> as <tt>(ints[1] &amp; 0x0000f000) &gt;&gt; 12</tt>.</li>
          <li>Extract <tt>variant</tt> as <tt>(ints[2] &amp; 0xf0000000) &gt;&gt; 24</tt>.</li>
          <li>Assign <tt>ints[1] = (ints[1] &amp; 0xffff0000) | ((ints[1] &amp; 0x00000fff) &lt;&lt; 4) | ((ints[2] &amp; 0x0fffffff) &gt;&gt; 24)</tt>.</li>
          <li>Assign <tt>ints[2] = (ints[2] &amp; 0x00ffffff) &lt;&lt; 8 | (ints[3] &gt;&gt; 24)</tt>.</li>
          <li>Assign <tt>ints[3] = (ints[3] &lt;&lt; 8) | variant</tt>.</li>
          <li>Convert <tt>ints</tt> back into a binary string and return it along with the <tt>version</tt>.</li>
        </ol>
        <t>Then one of the formatting algorithms, here is Base64:</t>
        <ol>
          <li>Take the binary string <tt>bin</tt> and shift the last octet to the right by two bits.</li>
          <li>Encode <tt>bin</tt> with the base64url algorithm to get the string <tt>b64</tt>.</li>
          <li>Truncate <tt>b64</tt> to 21 characters.</li>
          <li>Convert <tt>version</tt> to its value in the base32 table.</li>
        <li>return <tt>version</tt> concatenated to <tt>b64</tt>.</li>
        </ol>
        <t>And Base32:</t>
        <ol>
          <li>Take the binary string <tt>bin</tt> and shift the last octet to the right by one bit</li>
          <li>Encode <tt>bin</tt> with the base32 algorithm to get the string <tt>b32</tt>.</li>
          <li>Truncate <tt>b32</tt> to 25 characters.</li>
          <li>Convert <tt>version</tt> to its value in the Base32 table.</li>
          <li>Return <tt>version</tt> concatenated to <tt>b32</tt>, optionally in either upper or lower case.</li>
        </ol>
      </section>
      <section title="Decoding Algorithm" anchor="decoding">
        <ol>
          <li>First verify the syntax and determine whether the symbol <tt>ncname</tt> is base32 or base64.</li>
          <li>If <tt>ncname</tt> is base64 and the last character is lowercase, set it to uppercase.</li>
          <li>Remove the first character of the symbol <tt>ncname</tt> and convert it into an integer according to the base32 spec; call that integer <tt>version</tt>.</li>
          <li>Append padding if necessary to satisfy the decoder, <tt>A======</tt> for Base32 and <tt>A==</tt> for Base64.</li>
          <li>Decode the remainder of <tt>ncname</tt> by either the base32 or base64url decoding algorithm into binary string <tt>bin</tt>.</li>
          <li>If <tt>ncname</tt> was base32, shift the last octet of <tt>bin</tt> one bit to the left; if base64 shift it two bits.</li>
        </ol>
        <t>Now we apply the shifting algorithm in reverse:</t>
        <ol>
          <li>Ensure <tt>version</tt> is in the range of 0-15 by masking it with <tt>0xf</tt>.</li>
          <li>Convert the binary string <tt>bin</tt> into four 32-bit unsigned network-endian integers <tt>ints</tt>.</li>
          <li>Assign <tt>variant = (ints[3] &amp; 0xf0) &lt;&lt; 24</tt>.</li>
          <li>Shift and assign <tt>ints[3] &gt;&gt;= 8</tt>.</li>
          <li>Union and assign <tt>ints[3] |= ((ints[2] &amp; 0xff) &lt;&lt; 24)</tt>.</li>
          <li>Shift and assign <tt>ints[2] &gt;&gt;= 8</tt>.</li>
          <li>Union and assign <tt>ints[2] |= ((ints[1] &amp; 0xf) &lt;&lt; 24) | variant</tt>.</li>
          <li>Assign <tt>ints[1] = (ints[1] &amp; 0xffff0000) | (version &lt;&lt; 12) | ((ints[1] &gt;&gt; 4) &amp; 0xfff)</tt>.</li>
          <li>Convert <tt>ints</tt> back into the new binary string <tt>bin</tt>.</li>
          <li>Format <tt>bin</tt> as a UUID.</li>
        </ol>
      </section>
    </section>
  </middle>
  <back>
    <references title="Normative References">
      <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
        <front>
          <title>Key words for use in RFCs to Indicate Requirement Levels</title>
          <author initials="S." surname="Bradner" fullname="S. Bradner"/>
          <date year="1997" month="March"/>
          <abstract>
            <t>In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
          </abstract>
        </front>
        <seriesInfo name="BCP" value="14"/>
        <seriesInfo name="RFC" value="2119"/>
        <seriesInfo name="DOI" value="10.17487/RFC2119"/>
      </reference>
      <reference anchor="RFC4122" target="https://www.rfc-editor.org/info/rfc4122">
        <front>
          <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
          <author initials="P." surname="Leach" fullname="P. Leach"/>
          <author initials="M." surname="Mealling" fullname="M. Mealling"/>
          <author initials="R." surname="Salz" fullname="R. Salz"/>
          <date year="2005" month="July"/>
          <abstract>
            <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation's (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
            <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
          </abstract>
        </front>
        <seriesInfo name="RFC" value="4122"/>
        <seriesInfo name="DOI" value="10.17487/RFC4122"/>
      </reference>
      <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174">
        <front>
          <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
          <author initials="B." surname="Leiba" fullname="B. Leiba"/>
          <date year="2017" month="May"/>
          <abstract>
            <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
          </abstract>
        </front>
        <seriesInfo name="BCP" value="14"/>
        <seriesInfo name="RFC" value="8174"/>
        <seriesInfo name="DOI" value="10.17487/RFC8174"/>
      </reference>
    </references>
  </back>
</rfc>
